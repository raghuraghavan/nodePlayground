{"version":3,"sources":["../../src/utils/index.js"],"names":["assignType","getType","mapTo","mapToMany","mapToValues","type","obj","__type","undefined","keys","keyFn","rows","group","Map","map","key","forEach","row","set","Array","from","values","get","push","valueFn"],"mappings":";;;;;;;;;;;;;AAagBA,U,GAAAA,U;;;;;;;;AAQAC,O,GAAAA,O;;;;;AAKAC,K,GAAAA,K;;;;;;;;;;;AAWAC,S,GAAAA,S;;;;;;;;;;;AAWAC,W,GAAAA,W,EAhDhB;;;;;+BASA;;+GAIO,SAASJ,UAAT,CAAoBK,IAApB,EAAkC,CACvC,OAAQC,GAAD,IAAc,CACnB;AACA,QAAIA,GAAJ,EAASA,IAAIC,MAAJ,GAAaF,IAAb,CACT,OAAOC,GAAP,CACD,CAJD,CAKD,CAEM,SAASL,OAAT,CAAiBK,GAAjB,EAA2B,CAChC;AACA,SAAOA,MAAMA,IAAIC,MAAV,GAAmBC,SAA1B,CACD,CAEM,SAASN,KAAT,CACLO,IADK,EAELC,KAFK,EAGL,CACA,OAAQC,IAAD,IAAsB,CAC3B,MAAMC,QAAQ,IAAIC,GAAJ,CAAQJ,KAAKK,GAAL,CAASC,OAAO,CAACA,GAAD,EAAM,IAAN,CAAhB,CAAR,CAAd,CACAJ,KAAKK,OAAL,CAAaC,OAAOL,MAAMM,GAAN,CAAUR,MAAMO,GAAN,CAAV,EAAsBA,GAAtB,CAApB,EACA,OAAOE,MAAMC,IAAN,CAAWR,MAAMS,MAAN,EAAX,CAAP,CACD,CAJD,CAKD,CAEM,SAASlB,SAAT,CACLM,IADK,EAELC,KAFK,EAGL,CACA,OAAQC,IAAD,IAAsB,CAC3B,MAAMC,QAAQ,IAAIC,GAAJ,CAAQJ,KAAKK,GAAL,CAASC,OAAO,CAACA,GAAD,EAAM,EAAN,CAAhB,CAAR,CAAd,CACAJ,KAAKK,OAAL,CAAaC,OAAO,CAACL,MAAMU,GAAN,CAAUZ,MAAMO,GAAN,CAAV,KAAyB,EAA1B,EAA8BM,IAA9B,CAAmCN,GAAnC,CAApB,EACA,OAAOE,MAAMC,IAAN,CAAWR,MAAMS,MAAN,EAAX,CAAP,CACD,CAJD,CAKD,CAEM,SAASjB,WAAT,CACLK,IADK,EAELC,KAFK,EAGLc,OAHK,EAIL,CACA,OAAQb,IAAD,IAAsB,CAC3B,MAAMC,QAAQ,IAAIC,GAAJ,CAAQJ,KAAKK,GAAL,CAASC,OAAO,CAACA,GAAD,EAAM,IAAN,CAAhB,CAAR,CAAd,CACAJ,KAAKK,OAAL,CAAaC,OAAOL,MAAMM,GAAN,CAAUR,MAAMO,GAAN,CAAV,EAAsBO,QAAQP,GAAR,CAAtB,CAApB,EACA,OAAOE,MAAMC,IAAN,CAAWR,MAAMS,MAAN,EAAX,CAAP,CACD,CAJD;AAKD","file":"index.js","sourcesContent":["/**\n * Copyright Â© 2016-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n/* @flow */\n\n/*\n * Helper functions for data loaders (src/Context.js)\n * -------------------------------------------------------------------------- */\n\nexport function assignType(type: string) {\n  return (obj: any) => {\n    // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n    if (obj) obj.__type = type;\n    return obj;\n  };\n}\n\nexport function getType(obj: any) {\n  // eslint-disable-next-line no-underscore-dangle\n  return obj ? obj.__type : undefined;\n}\n\nexport function mapTo(\n  keys: Array<string | number>,\n  keyFn: any => string | number,\n) {\n  return (rows: Array<any>) => {\n    const group = new Map(keys.map(key => [key, null]));\n    rows.forEach(row => group.set(keyFn(row), row));\n    return Array.from(group.values());\n  };\n}\n\nexport function mapToMany(\n  keys: Array<string | number>,\n  keyFn: any => string | number,\n) {\n  return (rows: Array<any>) => {\n    const group = new Map(keys.map(key => [key, []]));\n    rows.forEach(row => (group.get(keyFn(row)) || []).push(row));\n    return Array.from(group.values());\n  };\n}\n\nexport function mapToValues(\n  keys: Array<string | number>,\n  keyFn: any => string | number,\n  valueFn: any => any,\n) {\n  return (rows: Array<any>) => {\n    const group = new Map(keys.map(key => [key, null]));\n    rows.forEach(row => group.set(keyFn(row), valueFn(row)));\n    return Array.from(group.values());\n  };\n}\n"]}