{"version":3,"sources":["../../../src/schema/story/mutations.js"],"names":["inputFields","title","type","text","url","outputFields","story","createStory","name","mutateAndGetPayload","input","ctx","data","errors","length","rows","table","insert","returning","storyById","load","then","updateStory","id","t","user","Error","where","first","push","key","message","author_id","updated_at","raw","update","x"],"mappings":"mUAAA;;;;;;;;;AASA;AACA;;AAEA,8B;AACA,sC;AACA,wC;AACA,sC;;;AAGA,MAAMA,cAAc;AAClBC,SAAO;AACLC,gCADK,EADW;;AAIlBC,QAAM;AACJD,gCADI,EAJY;;AAOlBE,OAAK;AACHF,gCADG,EAPa,EAApB;;;;AAYA,MAAMG,eAAe;AACnBC,SAAO;AACLJ,6BADK,EADY,EAArB;;;;AAMA,MAAMK,cAAc,gDAA6B;AAC/CC,QAAM,aADyC;AAE/CR,aAF+C;AAG/CK,cAH+C;AAI/C,QAAMI,mBAAN,CAA0BC,KAA1B,EAAsCC,GAAtC,EAAoD;AAClD,UAAM,EAAEC,IAAF,EAAQC,MAAR,KAAmB,wBAASH,KAAT,EAAgBC,GAAhB,CAAzB;;AAEA,QAAIE,OAAOC,MAAX,EAAmB;AACjB,YAAM,4BAAoBD,MAApB,CAAN;AACD;;AAED,UAAME,OAAO,MAAM;AAChBC,SADgB,CACV,SADU;AAEhBC,UAFgB,CAETL,IAFS;AAGhBM,aAHgB,CAGN,IAHM,CAAnB;AAIA,WAAOP,IAAIQ,SAAJ,CAAcC,IAAd,CAAmBL,KAAK,CAAL,CAAnB,EAA4BM,IAA5B,CAAiCf,UAAU,EAAEA,KAAF,EAAV,CAAjC,CAAP;AACD,GAhB8C,EAA7B,CAApB;;;AAmBA,MAAMgB,cAAc,gDAA6B;AAC/Cd,QAAM,aADyC;AAE/CR;AACEuB,QAAI,EAAErB,MAAM,+CAAR,EADN;AAEKF,aAFL,CAF+C;;AAM/CK,cAN+C;AAO/C,QAAMI,mBAAN,CAA0BC,KAA1B,EAAiCC,GAAjC,EAA+C;AAC7C,UAAM,EAAEa,CAAF,EAAKC,IAAL,KAAcd,GAApB;AACA,UAAM,EAAET,IAAF,EAAQqB,EAAR,KAAe,gCAAab,MAAMa,EAAnB,CAArB;;AAEA,QAAIrB,SAAS,OAAb,EAAsB;AACpB,YAAM,IAAIwB,KAAJ,CAAUF,EAAE,0BAAF,CAAV,CAAN;AACD;;AAED,UAAM,EAAEZ,IAAF,EAAQC,MAAR,KAAmB,wBAASH,KAAT,EAAgBC,GAAhB,CAAzB;AACA,UAAML,QAAQ,MAAM;AACjBU,SADiB,CACX,SADW;AAEjBW,SAFiB,CAEX,IAFW,EAEL,GAFK,EAEAJ,EAFA;AAGjBK,SAHiB,CAGX,GAHW,CAApB;;AAKA,QAAI,CAACtB,KAAL,EAAY;AACVO,aAAOgB,IAAP,CAAY;AACVC,aAAK,EADK;AAEVC,iBAAS,4DAFC,EAAZ;;AAID,KALD,MAKO,IAAIzB,MAAM0B,SAAN,KAAoBP,KAAKF,EAA7B,EAAiC;AACtCV,aAAOgB,IAAP,CAAY,EAAEC,KAAK,EAAP,EAAWC,SAAS,qCAApB,EAAZ;AACD;;AAED,QAAIlB,OAAOC,MAAX,EAAmB;AACjB,YAAM,4BAAoBD,MAApB,CAAN;AACD;;AAEDD,SAAKqB,UAAL,GAAkB,aAAGC,GAAH,CAAO,mBAAP,CAAlB;;AAEA,UAAM;AACHlB,SADG,CACG,SADH;AAEHW,SAFG,CAEG,IAFH,EAES,GAFT,EAEcJ,EAFd;AAGHY,UAHG,CAGIvB,IAHJ,CAAN;AAIA,WAAOD,IAAIQ,SAAJ,CAAcC,IAAd,CAAmBG,EAAnB,EAAuBF,IAAvB,CAA4Be,MAAM,EAAE9B,OAAO8B,CAAT,EAAN,CAA5B,CAAP;AACD,GAzC8C,EAA7B,CAApB,C;;;AA4Ce;AACb7B,aADa;AAEbe,aAFa,E","file":"mutations.js","sourcesContent":["/**\n * Copyright Â© 2016-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n/* @flow */\n\nimport { GraphQLNonNull, GraphQLID, GraphQLString } from 'graphql';\nimport { fromGlobalId, mutationWithClientMutationId } from 'graphql-relay';\n\nimport db from '../../db';\nimport validate from './validate';\nimport StoryType from './StoryType';\nimport { ValidationError } from '../../errors';\nimport type Context from '../../Context';\n\nconst inputFields = {\n  title: {\n    type: GraphQLString,\n  },\n  text: {\n    type: GraphQLString,\n  },\n  url: {\n    type: GraphQLString,\n  },\n};\n\nconst outputFields = {\n  story: {\n    type: StoryType,\n  },\n};\n\nconst createStory = mutationWithClientMutationId({\n  name: 'CreateStory',\n  inputFields,\n  outputFields,\n  async mutateAndGetPayload(input: any, ctx: Context) {\n    const { data, errors } = validate(input, ctx);\n\n    if (errors.length) {\n      throw new ValidationError(errors);\n    }\n\n    const rows = await db\n      .table('stories')\n      .insert(data)\n      .returning('id');\n    return ctx.storyById.load(rows[0]).then(story => ({ story }));\n  },\n});\n\nconst updateStory = mutationWithClientMutationId({\n  name: 'UpdateStory',\n  inputFields: {\n    id: { type: new GraphQLNonNull(GraphQLID) },\n    ...inputFields,\n  },\n  outputFields,\n  async mutateAndGetPayload(input, ctx: Context) {\n    const { t, user } = ctx;\n    const { type, id } = fromGlobalId(input.id);\n\n    if (type !== 'Story') {\n      throw new Error(t('The story ID is invalid.'));\n    }\n\n    const { data, errors } = validate(input, ctx);\n    const story = await db\n      .table('stories')\n      .where('id', '=', id)\n      .first('*');\n\n    if (!story) {\n      errors.push({\n        key: '',\n        message: 'Failed to save the story. Please make sure that it exists.',\n      });\n    } else if (story.author_id !== user.id) {\n      errors.push({ key: '', message: 'You can only edit your own stories.' });\n    }\n\n    if (errors.length) {\n      throw new ValidationError(errors);\n    }\n\n    data.updated_at = db.raw('CURRENT_TIMESTAMP');\n\n    await db\n      .table('stories')\n      .where('id', '=', id)\n      .update(data);\n    return ctx.storyById.load(id).then(x => ({ story: x }));\n  },\n});\n\nexport default {\n  createStory,\n  updateStory,\n};\n"]}