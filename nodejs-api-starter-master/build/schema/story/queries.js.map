{"version":3,"sources":["../../../src/schema/story/queries.js"],"names":["stories","type","name","nodeType","connectionFields","totalCount","connectionType","args","resolve","root","ctx","limit","first","offset","after","data","Promise","all","table","orderBy","then","rows","forEach","x","storyById","prime","id","count","sliceStart","arrayLength"],"mappings":"mUAAA;;;;;;;;;AASA;AACA;;;;;;;AAOA,8B;AACA,wC;;;AAGA,MAAMA,UAAU;AACdC,QAAM,yCAAsB;AAC1BC,UAAM,OADoB;AAE1BC,iCAF0B;AAG1BC,sBAAkB;AAChBC,kBAAY,EAAEJ,MAAM,gDAAR,EADI,EAHQ,EAAtB;;AAMHK,gBAPW;AAQdC,2CARc;AASd,QAAMC,OAAN,CAAcC,IAAd,EAAyBF,IAAzB,EAAoCG,GAApC,EAAkD;AAChD,UAAMC,QAAQ,OAAOJ,KAAKK,KAAZ,KAAsB,WAAtB,GAAoC,IAApC,GAA2CL,KAAKK,KAA9D;AACA,UAAMC,SAASN,KAAKO,KAAL,GAAa,kCAAeP,KAAKO,KAApB,IAA6B,CAA1C,GAA8C,CAA7D;;AAEA,UAAM,CAACC,IAAD,EAAOV,UAAP,IAAqB,MAAMW,QAAQC,GAAR,CAAY;AAC3C;AACGC,SADH,CACS,SADT;AAEGC,WAFH,CAEW,YAFX,EAEyB,MAFzB;AAGGR,SAHH,CAGSA,KAHT;AAIGE,UAJH,CAIUA,MAJV;AAKGO,QALH,CAKQC,QAAQ;AACZA,WAAKC,OAAL,CAAaC,KAAKb,IAAIc,SAAJ,CAAcC,KAAd,CAAoBF,EAAEG,EAAtB,EAA0BH,CAA1B,CAAlB;AACA,aAAOF,IAAP;AACD,KARH,CAD2C;AAU3C;AACGH,SADH,CACS,SADT;AAEGS,SAFH;AAGGP,QAHH,CAGQG,KAAKA,EAAE,CAAF,EAAKI,KAHlB,CAV2C,CAAZ,CAAjC;;;AAgBA;AACK,gDAAyBZ,IAAzB,EAA+BR,IAA/B,EAAqC;AACtCqB,kBAAYf,MAD0B;AAEtCgB,mBAAaxB,UAFyB,EAArC,CADL;;AAKEA,gBALF;;AAOD,GApCa,EAAhB,C;;;AAuCe;AACbL,SADa,E","file":"queries.js","sourcesContent":["/**\n * Copyright Â© 2016-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n/* @flow */\n\nimport { GraphQLNonNull, GraphQLInt } from 'graphql';\nimport {\n  connectionDefinitions,\n  forwardConnectionArgs,\n  connectionFromArraySlice,\n  cursorToOffset,\n} from 'graphql-relay';\n\nimport db from '../../db';\nimport StoryType from './StoryType';\nimport type Context from '../../Context';\n\nconst stories = {\n  type: connectionDefinitions({\n    name: 'Story',\n    nodeType: StoryType,\n    connectionFields: {\n      totalCount: { type: new GraphQLNonNull(GraphQLInt) },\n    },\n  }).connectionType,\n  args: forwardConnectionArgs,\n  async resolve(root: any, args: any, ctx: Context) {\n    const limit = typeof args.first === 'undefined' ? '10' : args.first;\n    const offset = args.after ? cursorToOffset(args.after) + 1 : 0;\n\n    const [data, totalCount] = await Promise.all([\n      db\n        .table('stories')\n        .orderBy('created_at', 'desc')\n        .limit(limit)\n        .offset(offset)\n        .then(rows => {\n          rows.forEach(x => ctx.storyById.prime(x.id, x));\n          return rows;\n        }),\n      db\n        .table('stories')\n        .count()\n        .then(x => x[0].count),\n    ]);\n\n    return {\n      ...connectionFromArraySlice(data, args, {\n        sliceStart: offset,\n        arrayLength: totalCount,\n      }),\n      totalCount,\n    };\n  },\n};\n\nexport default {\n  stories,\n};\n"]}