{"version":3,"sources":["../../src/schema/node.js"],"names":["nodeInterface","nodeField","nodesField","globalId","context","type","id","userById","load","then","emailById","storyById","commentById","obj","require","default"],"mappings":";;;;;;;;;;AAUA;;AAEA,iC,CAZA;;;;;sCAQA,mCAMO,MAAM,EAAEA,aAAF,EAAiBC,SAAjB,EAA4BC,UAA5B,KAA2C,mCACtD,CAACC,QAAD,EAAWC,OAAX,KAAuB,CACrB,MAAM,EAAEC,IAAF,EAAQC,EAAR,KAAe,gCAAaH,QAAb,CAArB;AAEA,UAAQE,IAAR;AACE,SAAK,MAAL;AACE,aAAOD,QAAQG,QAAR,CAAiBC,IAAjB,CAAsBF,EAAtB,EAA0BG,IAA1B,CAA+B,uBAAW,MAAX,CAA/B,CAAP;AACF,SAAK,OAAL;AACE,aAAOL,QAAQM,SAAR,CAAkBF,IAAlB,CAAuBF,EAAvB,EAA2BG,IAA3B,CAAgC,uBAAW,OAAX,CAAhC,CAAP;AACF,SAAK,OAAL;AACE,aAAOL,QAAQO,SAAR,CAAkBH,IAAlB,CAAuBF,EAAvB,EAA2BG,IAA3B,CAAgC,uBAAW,OAAX,CAAhC,CAAP;AACF,SAAK,SAAL;AACE,aAAOL,QAAQQ,WAAR,CAAoBJ,IAApB,CAAyBF,EAAzB,EAA6BG,IAA7B,CAAkC,uBAAW,SAAX,CAAlC,CAAP;AACF;AACE,aAAO,IAAP,CAVJ;;AAYD,CAhBqD;AAiBtDI,OAAO;AACL,UAAQ,oBAAQA,GAAR,CAAR;AACE,SAAK,MAAL;AACE,aAAOC,QAAQ,iBAAR,EAA2BC,OAAlC;AACF,SAAK,OAAL;AACE,aAAOD,QAAQ,kBAAR,EAA4BC,OAAnC;AACF,SAAK,OAAL;AACE,aAAOD,QAAQ,mBAAR,EAA6BC,OAApC;AACF,SAAK,SAAL;AACE,aAAOD,QAAQ,uBAAR,EAAiCC,OAAxC;AACF;AACE,aAAO,IAAP,CAVJ;;AAYD,CA9BqD,CAAjD,C,QAAQf,a,GAAAA,a,SAAeC,S,GAAAA,S,SAAWC,U,GAAAA,U","file":"node.js","sourcesContent":["/**\n * Copyright Â© 2016-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n/* @flow */\n/* eslint-disable global-require */\n\nimport { nodeDefinitions, fromGlobalId } from 'graphql-relay';\n\nimport { assignType, getType } from '../utils';\n\nexport const { nodeInterface, nodeField, nodesField } = nodeDefinitions(\n  (globalId, context) => {\n    const { type, id } = fromGlobalId(globalId);\n\n    switch (type) {\n      case 'User':\n        return context.userById.load(id).then(assignType('User'));\n      case 'Email':\n        return context.emailById.load(id).then(assignType('Email'));\n      case 'Story':\n        return context.storyById.load(id).then(assignType('Story'));\n      case 'Comment':\n        return context.commentById.load(id).then(assignType('Comment'));\n      default:\n        return null;\n    }\n  },\n  obj => {\n    switch (getType(obj)) {\n      case 'User':\n        return require('./user/UserType').default;\n      case 'Email':\n        return require('./user/EmailType').default;\n      case 'Story':\n        return require('./story/StoryType').default;\n      case 'Comment':\n        return require('./comment/CommentType').default;\n      default:\n        return null;\n    }\n  },\n);\n"]}