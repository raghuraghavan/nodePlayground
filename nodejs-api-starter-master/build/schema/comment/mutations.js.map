{"version":3,"sources":["../../../src/schema/comment/mutations.js"],"names":["inputFields","storyId","type","parentId","text","outputFields","story","createComment","name","mutateAndGetPayload","input","context","t","user","commentById","data","errors","length","storyType","id","Error","commentType","parent_id","story_id","author_id","rows","table","insert","returning","load","then","comment","updateComment","ctx","where","first","push","key","message","updated_at","raw","update","x"],"mappings":"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","file":"mutations.js","sourcesContent":["/**\n * Copyright Â© 2016-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n/* @flow */\n\nimport { GraphQLNonNull, GraphQLID, GraphQLString } from 'graphql';\nimport { fromGlobalId, mutationWithClientMutationId } from 'graphql-relay';\n\nimport db from '../../db';\nimport validate from './validate';\nimport CommentType from './CommentType';\nimport { ValidationError } from '../../errors';\nimport type Context from '../../Context';\n\nconst inputFields = {\n  storyId: {\n    type: new GraphQLNonNull(GraphQLID),\n  },\n  parentId: {\n    type: GraphQLID,\n  },\n  text: {\n    type: GraphQLString,\n  },\n};\n\nconst outputFields = {\n  story: {\n    type: CommentType,\n  },\n};\n\nconst createComment = mutationWithClientMutationId({\n  name: 'CreateComment',\n  inputFields,\n  outputFields,\n  async mutateAndGetPayload(input, context: Context) {\n    const { t, user, commentById } = context;\n    const { data, errors } = validate(input, context);\n\n    if (errors.length) {\n      throw new ValidationError(errors);\n    }\n\n    const { type: storyType, id: storyId } = fromGlobalId(input.storyId);\n\n    if (storyType !== 'Story') {\n      throw new Error(t('The story ID is invalid.'));\n    }\n\n    if (typeof input.parentId !== 'undefined' && input.parentId !== '') {\n      const { type: commentType, id: parentId } = fromGlobalId(input.parentId);\n      if (commentType !== 'Comment') {\n        throw new Error(t('The parent comment ID is invalid.'));\n      }\n      data.parent_id = parentId;\n    }\n\n    data.story_id = storyId;\n    data.author_id = user.id;\n    const rows = await db\n      .table('comments')\n      .insert(data)\n      .returning('id');\n    return commentById.load(rows[0]).then(comment => ({ comment }));\n  },\n});\n\nconst updateComment = mutationWithClientMutationId({\n  name: 'UpdateComment',\n  inputFields: {\n    id: {\n      type: new GraphQLNonNull(GraphQLID),\n    },\n    text: {\n      type: GraphQLID,\n    },\n  },\n  outputFields,\n  async mutateAndGetPayload(input, ctx: Context) {\n    const { t, user } = ctx;\n    const { type, id } = fromGlobalId(input.id);\n\n    if (type !== 'Comment') {\n      throw new Error(t('The comment ID is invalid.'));\n    }\n\n    const { data, errors } = validate(input, ctx);\n    const comment = await db\n      .table('comments')\n      .where('id', '=', id)\n      .first('*');\n\n    if (!comment) {\n      errors.push({\n        key: '',\n        message: 'Failed to save the comment. Please make sure that it exists.',\n      });\n    } else if (comment.author_id !== user.id) {\n      errors.push({ key: '', message: 'You can only edit your own comments.' });\n    }\n\n    if (errors.length) {\n      throw new ValidationError(errors);\n    }\n\n    data.updated_at = db.raw('CURRENT_TIMESTAMP');\n\n    await db\n      .table('comments')\n      .where('id', '=', id)\n      .update(data);\n    return ctx.commentById.load(id).then(x => ({ comment: x }));\n  },\n});\n\nexport default {\n  createComment,\n  updateComment,\n};\n"]}