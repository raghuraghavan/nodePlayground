{"version":3,"sources":["../../../src/schema/comment/CommentType.js"],"names":["CommentType","name","interfaces","fields","id","story","type","resolve","parent","args","ctx","storyById","load","story_id","parent_id","commentById","author","userById","author_id","comments","commentsByParentId","text","pointsCount","commentPointsCount","createdAt","created_at","updatedAt","updated_at"],"mappings":";;;;;;;;;AASA;;;;;;;AAOA;;AAEA;AACA,+C;AACA,4C;;;AAGA,MAAMA,cAAc,+BAAsB;AACxCC,QAAM,SADkC;AAExCC,cAAY,qBAF4B;;AAIxCC,UAAQ,OAAO;AACbC,QAAI,kCADS;;AAGbC,WAAO;AACLC,YAAM,gDADD;AAELC,cAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,GAAtB,EAAoC;AAClC,eAAOA,IAAIC,SAAJ,CAAcC,IAAd,CAAmBJ,OAAOK,QAA1B,CAAP;AACD,OAJI,EAHM;;;AAUbL,YAAQ;AACNF,YAAMN,WADA;AAENO,cAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,GAAtB,EAAoC;AAClC,eAAOF,OAAOM,SAAP,IAAoBJ,IAAIK,WAAJ,CAAgBH,IAAhB,CAAqBJ,OAAOM,SAA5B,CAA3B;AACD,OAJK,EAVK;;;AAiBbE,YAAQ;AACNV,YAAM,+CADA;AAENC,cAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,GAAtB,EAAoC;AAClC,eAAOA,IAAIO,QAAJ,CAAaL,IAAb,CAAkBJ,OAAOU,SAAzB,CAAP;AACD,OAJK,EAjBK;;;AAwBbC,cAAU;AACRb,YAAM,yBAAgBN,WAAhB,CADE;AAERO,cAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,GAAtB,EAAoC;AAClC,eAAOA,IAAIU,kBAAJ,CAAuBR,IAAvB,CAA4BJ,OAAOJ,EAAnC,CAAP;AACD,OAJO,EAxBG;;;AA+BbiB,UAAM;AACJf,kCADI,EA/BO;;;AAmCbgB,iBAAa;AACXhB,YAAM,gDADK;AAEXC,cAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,GAAtB,EAAoC;AAClC,eAAOA,IAAIa,kBAAJ,CAAuBX,IAAvB,CAA4BJ,OAAOJ,EAAnC,CAAP;AACD,OAJU,EAnCA;;;AA0CboB,eAAW;AACTlB,YAAM,mDADG;AAETC,cAAQC,MAAR,EAAgB;AACd,eAAOA,OAAOiB,UAAd;AACD,OAJQ,EA1CE;;;AAiDbC,eAAW;AACTpB,YAAM,mDADG;AAETC,cAAQC,MAAR,EAAgB;AACd,eAAOA,OAAOmB,UAAd;AACD,OAJQ,EAjDE,EAAP,CAJgC,EAAtB,CAApB,C,CAvBA;;;;;sCAqFe3B,W","file":"CommentType.js","sourcesContent":["/**\n * Copyright Â© 2016-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n/* @flow */\n\nimport {\n  GraphQLObjectType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLInt,\n  GraphQLString,\n} from 'graphql';\nimport { globalIdField } from 'graphql-relay';\n\nimport { nodeInterface } from '../node';\nimport StoryType from '../story/StoryType';\nimport UserType from '../user/UserType';\nimport type Context from '../../Context';\n\nconst CommentType = new GraphQLObjectType({\n  name: 'Comment',\n  interfaces: [nodeInterface],\n\n  fields: () => ({\n    id: globalIdField(),\n\n    story: {\n      type: new GraphQLNonNull(StoryType),\n      resolve(parent, args, ctx: Context) {\n        return ctx.storyById.load(parent.story_id);\n      },\n    },\n\n    parent: {\n      type: CommentType,\n      resolve(parent, args, ctx: Context) {\n        return parent.parent_id && ctx.commentById.load(parent.parent_id);\n      },\n    },\n\n    author: {\n      type: new GraphQLNonNull(UserType),\n      resolve(parent, args, ctx: Context) {\n        return ctx.userById.load(parent.author_id);\n      },\n    },\n\n    comments: {\n      type: new GraphQLList(CommentType),\n      resolve(parent, args, ctx: Context) {\n        return ctx.commentsByParentId.load(parent.id);\n      },\n    },\n\n    text: {\n      type: GraphQLString,\n    },\n\n    pointsCount: {\n      type: new GraphQLNonNull(GraphQLInt),\n      resolve(parent, args, ctx: Context) {\n        return ctx.commentPointsCount.load(parent.id);\n      },\n    },\n\n    createdAt: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve(parent) {\n        return parent.created_at;\n      },\n    },\n\n    updatedAt: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve(parent) {\n        return parent.updated_at;\n      },\n    },\n  }),\n});\n\nexport default CommentType;\n"]}