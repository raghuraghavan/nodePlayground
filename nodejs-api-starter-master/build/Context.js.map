{"version":3,"sources":["../src/Context.js"],"names":["Context","constructor","request","userById","keys","table","whereIn","select","then","x","id","emailById","emailsByUserId","user_id","storyById","storyCommentsCount","leftJoin","groupBy","raw","count","storyPointsCount","commentById","commentsByStoryId","story_id","commentsByParentId","parent_id","commentPointsCount","t","user","ensureIsAuthenticated"],"mappings":"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","file":"Context.js","sourcesContent":["/**\n * Copyright Â© 2016-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n/* @flow */\n\nimport DataLoader from 'dataloader';\nimport type { request as Request } from 'express';\nimport type { t as Translator } from 'i18next';\n\nimport db from './db';\nimport { mapTo, mapToMany, mapToValues } from './utils';\nimport { UnauthorizedError } from './errors';\n\nclass Context {\n  request: Request;\n  user: any;\n  t: Translator;\n\n  constructor(request: Request) {\n    this.request = request;\n    this.t = request.t;\n  }\n\n  get user(): any {\n    return this.request.user;\n  }\n\n  /*\n   * Data loaders to be used with GraphQL resolve() functions. For example:\n   *\n   *   resolve(post: any, args: any, { userById }: Context) {\n   *     return userById.load(post.author_id);\n   *   }\n   *\n   * For more information visit https://github.com/facebook/dataloader\n   */\n\n  userById = new DataLoader(keys =>\n    db\n      .table('users')\n      .whereIn('id', keys)\n      .select()\n      .then(mapTo(keys, x => x.id)),\n  );\n\n  emailById = new DataLoader(keys =>\n    db\n      .table('emails')\n      .whereIn('id', keys)\n      .select()\n      .then(mapTo(keys, x => x.id)),\n  );\n\n  emailsByUserId = new DataLoader(keys =>\n    db\n      .table('emails')\n      .whereIn('user_id', keys)\n      .select()\n      .then(mapToMany(keys, x => x.user_id)),\n  );\n\n  storyById = new DataLoader(keys =>\n    db\n      .table('stories')\n      .whereIn('id', keys)\n      .select()\n      .then(mapTo(keys, x => x.id)),\n  );\n\n  storyCommentsCount = new DataLoader(keys =>\n    db\n      .table('stories')\n      .leftJoin('comments', 'stories.id', 'comments.story_id')\n      .whereIn('stories.id', keys)\n      .groupBy('stories.id')\n      .select('stories.id', db.raw('count(comments.story_id)'))\n      .then(mapToValues(keys, x => x.id, x => x.count)),\n  );\n\n  storyPointsCount = new DataLoader(keys =>\n    db\n      .table('stories')\n      .leftJoin('story_points', 'stories.id', 'story_points.story_id')\n      .whereIn('stories.id', keys)\n      .groupBy('stories.id')\n      .select('stories.id', db.raw('count(story_points.story_id)'))\n      .then(mapToValues(keys, x => x.id, x => x.count)),\n  );\n\n  commentById = new DataLoader(keys =>\n    db\n      .table('comments')\n      .whereIn('id', keys)\n      .select()\n      .then(mapTo(keys, x => x.id)),\n  );\n\n  commentsByStoryId = new DataLoader(keys =>\n    db\n      .table('comments')\n      .whereIn('story_id', keys)\n      .select()\n      .then(mapToMany(keys, x => x.story_id)),\n  );\n\n  commentsByParentId = new DataLoader(keys =>\n    db\n      .table('comments')\n      .whereIn('parent_id', keys)\n      .select()\n      .then(mapToMany(keys, x => x.parent_id)),\n  );\n\n  commentPointsCount = new DataLoader(keys =>\n    db\n      .table('comments')\n      .leftJoin('comment_points', 'comments.id', 'comment_points.comment_id')\n      .whereIn('comments.id', keys)\n      .groupBy('comments.id')\n      .select('comments.id', db.raw('count(comment_points.comment_id)'))\n      .then(mapToValues(keys, x => x.id, x => x.count)),\n  );\n\n  /*\n   * Authenticatinon and permissions.\n   */\n\n  ensureIsAuthenticated() {\n    if (!this.user) throw new UnauthorizedError();\n  }\n}\n\nexport default Context;\n"]}