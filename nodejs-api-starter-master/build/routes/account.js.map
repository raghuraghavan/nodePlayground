{"version":3,"sources":["../../src/routes/account.js"],"names":["router","loginProviders","provider","options","scope","accessType","getOrigin","url","startsWith","x","String","protocol","host","parse","isValidReturnURL","whitelist","process","env","CORS_ORIGIN","split","isURL","require_tld","require_protocol","protocols","includes","getSuccessRedirect","req","query","return","body","cookies","sid","session","cookie","originalMaxAge","forEach","get","res","next","returnTo","authenticate","failureFlash","prompt","successReturnToOrRedirect","failureRedirect","post","logout","status","send","errors","flash"],"mappings":"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","file":"account.js","sourcesContent":["/**\n * Copyright Â© 2016-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n/* @flow */\n\nimport URL from 'url';\nimport passport from 'passport';\nimport validator from 'validator';\nimport { Router } from 'express';\n\nconst router = new Router();\n\n// External login providers. Also see src/passport.js.\nconst loginProviders = [\n  {\n    // https://developers.facebook.com/docs/facebook-login/permissions/\n    provider: 'facebook',\n    options: { scope: ['public_profile', 'email'] },\n  },\n  {\n    provider: 'google',\n    options: { scope: 'profile email', accessType: 'offline' },\n  },\n  {\n    provider: 'twitter',\n    options: {},\n  },\n];\n\n// '/about' => ''\n// http://localhost:3000/some/page => http://localhost:3000\nfunction getOrigin(url: string) {\n  if (!url || url.startsWith('/')) return '';\n  return (x => `${String(x.protocol)}//${String(x.host)}`)(URL.parse(url));\n}\n\n// '/about' => `true` (all relative URL paths are allowed)\n// 'http://localhost:3000/about' => `true` (but only if its origin is whitelisted)\nfunction isValidReturnURL(url: string) {\n  if (url.startsWith('/')) return true;\n  const whitelist = process.env.CORS_ORIGIN\n    ? process.env.CORS_ORIGIN.split(',')\n    : [];\n  return (\n    validator.isURL(url, {\n      require_tld: false,\n      require_protocol: true,\n      protocols: ['http', 'https'],\n    }) && whitelist.includes(getOrigin(url))\n  );\n}\n\n// Generates a URL for redirecting a user to upon successfull authentication.\n// It is intended to support cross-domain authentication in development mode.\n// For example, a user goes to http://localhost:3000/login (frontend) to sign in,\n// then he's being redirected to http://localhost:8080/login/facebook (backend),\n// Passport.js redirects the user to Facebook, which redirects the user back to\n// http://localhost:8080/login/facebook/return and finally, user is being redirected\n// to http://localhost:3000/?sessionID=xxx where front-end middleware can save that\n// session ID into cookie (res.cookie.sid = req.query.sessionID).\nfunction getSuccessRedirect(req) {\n  const url = req.query.return || req.body.return || '/';\n  if (!isValidReturnURL(url)) return '/';\n  if (!getOrigin(url)) return url;\n  return `${url}${url.includes('?') ? '&' : '?'}sessionID=${req.cookies.sid}${\n    req.session.cookie.originalMaxAge\n      ? `&maxAge=${req.session.cookie.originalMaxAge}`\n      : ''\n  }`;\n}\n\n// Registers route handlers for the external login providers\nloginProviders.forEach(({ provider, options }) => {\n  router.get(\n    `/login/${provider}`,\n    (req, res, next) => {\n      req.session.returnTo = getSuccessRedirect(req);\n      next();\n    },\n    passport.authenticate(provider, {\n      failureFlash: true,\n      prompt: 'select_account',\n      ...options,\n    }),\n  );\n\n  router.get(`/login/${provider}/return`, (req, res, next) =>\n    passport.authenticate(provider, {\n      successReturnToOrRedirect: true,\n      failureFlash: true,\n      failureRedirect: `${getOrigin(req.session.returnTo)}/login`,\n    })(req, res, next),\n  );\n});\n\n// Remove the `user` object from the session. Example:\n//   fetch('/login/clear', { method: 'POST', credentials: 'include' })\n//     .then(() => window.location = '/')\nrouter.post('/login/clear', (req, res) => {\n  req.logout();\n  res.status(200).send('OK');\n});\n\n// Allows to fetch the last login error(s) (which is usefull for single-page apps)\nrouter.post('/login/error', (req, res) => {\n  res.send({ errors: req.flash('error') });\n});\n\nexport default router;\n"]}