{"version":3,"sources":["../src/email.js"],"names":["process","env","NODE_ENV","from","streamTransport","config","templates","Map","baseDir","resolve","__dirname","transporter","createTransport","registerHelper","key","options","data","root","t","hash","loadTemplate","filename","m","module","constructor","_compile","readFileSync","template","exports","render","name","context","size","readdirSync","forEach","statSync","isDirectory","set","subject","html","get","Error","send","message","sendMail"],"mappings":";;;;;;;;;AASA,wB;AACA,4B;AACA,wC;AACA,wC,yWAZA;;;;;qZAcA;AACA;AACA,aACEA,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACI,EACEC,MAAM,sBADR;AAEEC,mBAAiB,IAFnB,EADJ;;AAKI;AACED,QAAM,sBADR;AAEEC,mBAAiB,IAFnB,EANN,CAAM,EAAED,IAAF,EAAN,QAAiBE,MAAjB;;;AAWA,MAAMC,YAAY,IAAIC,GAAJ,EAAlB;AACA,MAAMC,UAAU,eAAKC,OAAL,CAAaC,SAAb,EAAwB,QAAxB,CAAhB;AACA,MAAMC,cAAc,qBAAWC,eAAX,CAA2BP,MAA3B,EAAmC,EAAEF,IAAF,EAAnC,CAApB;;AAEA;AACA,qBAAWU,cAAX,CAA0B,GAA1B,EAA+B,CAACC,GAAD,EAAMC,OAAN;AAC7BA,QAAQC,IAAR,CAAaC,IAAb,CAAkBC,CAAlB,CAAoBJ,GAApB,EAAyBC,QAAQI,IAAjC,CADF;;;AAIA,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AAC9B,QAAMC,IAAI,IAAIC,OAAOC,WAAX,EAAV;AACA;AACAF,IAAEG,QAAF,CAAW,aAAGC,YAAH,CAAgBL,QAAhB,EAA0B,MAA1B,CAAX,EAA8CA,QAA9C;AACA,SAAO,qBAAWM,QAAX,CAAoBL,EAAEM,OAAtB,CAAP;AACD;;AAED;;;;;;;;;;AAUe;AACb;;;;;AAKAC,SAAOC,IAAP,EAAqBC,UAAe,EAApC,EAAwC;AACtC,QAAI,CAACzB,UAAU0B,IAAf,EAAqB;AACnB,mBAAGC,WAAH,CAAezB,OAAf,EAAwB0B,OAAxB,CAAgCP,YAAY;AAC1C,YAAI,aAAGQ,QAAH,CAAa,GAAE3B,OAAQ,IAAGmB,QAAS,EAAnC,EAAsCS,WAAtC,EAAJ,EAAyD;AACvD9B,oBAAU+B,GAAV,CAAcV,QAAd,EAAwB;AACtBW,qBAASlB,aAAc,GAAEZ,OAAQ,IAAGmB,QAAS,aAApC,CADa;AAEtBY,kBAAMnB,aAAc,GAAEZ,OAAQ,IAAGmB,QAAS,UAApC,CAFgB,EAAxB;;AAID;AACF,OAPD;AAQD;;AAED,UAAMA,WAAWrB,UAAUkC,GAAV,CAAcV,IAAd,CAAjB;;AAEA,QAAI,CAACH,QAAL,EAAe;AACb,YAAM,IAAIc,KAAJ,CAAW,uBAAsBX,IAAK,eAAtC,CAAN;AACD;;AAED,WAAO;AACLQ,eAASX,SAASW,OAAT,CAAiBP,OAAjB,CADJ;AAELQ,YAAMZ,SAASY,IAAT,CAAcR,OAAd,CAFD,EAAP;;AAID,GA5BY;AA6Bb;;;AAGAW,OAAKC,OAAL,EAAmB5B,OAAnB,EAAiC;AAC/B,WAAOJ,YAAYiC,QAAZ;AACFD,WADE;AAEF5B,WAFE,EAAP;;AAID,GArCY,E","file":"email.js","sourcesContent":["/**\n * Copyright Â© 2016-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n/* @flow */\n\nimport fs from 'fs';\nimport path from 'path';\nimport nodemailer from 'nodemailer';\nimport handlebars from 'handlebars';\n\n// TODO: Configure email transport for the production environment\n// https://nodemailer.com/smtp/\nconst { from, ...config } =\n  process.env.NODE_ENV === 'production'\n    ? {\n        from: 'no-reply@example.com',\n        streamTransport: true,\n      }\n    : {\n        from: 'no-reply@example.com',\n        streamTransport: true,\n      };\n\nconst templates = new Map();\nconst baseDir = path.resolve(__dirname, 'emails');\nconst transporter = nodemailer.createTransport(config, { from });\n\n// Register i18n translation helper, for example: {{t \"Welcome, {{user}}\" user=\"John\"}}\nhandlebars.registerHelper('t', (key, options) =>\n  options.data.root.t(key, options.hash),\n);\n\nfunction loadTemplate(filename) {\n  const m = new module.constructor();\n  // eslint-disable-next-line no-underscore-dangle\n  m._compile(fs.readFileSync(filename, 'utf8'), filename);\n  return handlebars.template(m.exports);\n}\n\n/**\n * Usage example:\n *\n *   const message = await email.render('welcome', { name: 'John' });\n *   await email.send({\n *     to: '...',\n *     from: '...',\n *     ...message,\n *   });\n */\nexport default {\n  /**\n   * Renders email message from a template and context variables.\n   * @param {string} name The name of a template to render. See `src/emails`.\n   * @param {object} context Context variables.\n   */\n  render(name: string, context: any = {}) {\n    if (!templates.size) {\n      fs.readdirSync(baseDir).forEach(template => {\n        if (fs.statSync(`${baseDir}/${template}`).isDirectory()) {\n          templates.set(template, {\n            subject: loadTemplate(`${baseDir}/${template}/subject.js`),\n            html: loadTemplate(`${baseDir}/${template}/html.js`),\n          });\n        }\n      });\n    }\n\n    const template = templates.get(name);\n\n    if (!template) {\n      throw new Error(`The email template '${name}' is missing.`);\n    }\n\n    return {\n      subject: template.subject(context),\n      html: template.html(context),\n    };\n  },\n  /**\n   * Sends email message via Nodemailer.\n   */\n  send(message: any, options: any) {\n    return transporter.sendMail({\n      ...message,\n      ...options,\n    });\n  },\n};\n"]}